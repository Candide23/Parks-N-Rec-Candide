{"ast":null,"code":"const {\n  execSync,\n  spawn\n} = require('child_process');\n\nconst {\n  platform\n} = process;\n\nconst {\n  join\n} = require('path');\n\nconst isProgramInstalled = require('is-program-installed');\n\nconst windowsScript = join(__dirname, 'msgbox.vbs');\n\nconst execCmd = cmds => spawn(cmds[0], cmds.splice(1));\n\nconst unixPrograms = ['kdialog', 'zenity', 'yad', 'notify-send', 'xmessage', 'dialog', 'whiptail'];\nconst bestUnixProgram = unixPrograms.filter(isProgramInstalled)[0] || 'console';\n\nconst cscript = s => ['cscript', windowsScript, s];\n\nconst msg = str => ['msg', '\"%username%\"', str];\n\nconst zenity = s => ['zenity', '--info', '--text', s];\n\nconst yad = s => ['yad', '--text', s, '--button', 'OK'];\n\nconst notifySend = s => ['notify-send', s];\n\nconst xmessage = s => ['xmessage', s];\n\nconst dialog = s => ['dialog', '--msgbox', s, '10', '30'];\n\nconst whiptail = s => ['whiptail', '--msbox', s, '10', '30'];\n\nconst kdialog = s => ['kdialog', '--msgbox', s];\n\nconst osascript = s => ['osascript', '-e', `tell app \"System Events\" to display dialog \"${s}\" buttons \"OK\"`];\n\nconst hasCscript = platform.startsWith('win') && (() => {\n  try {\n    execSync('cscript');\n    return true;\n  } catch {\n    return false;\n  }\n})();\n\nconst nameMap = {\n  console: console.log,\n  cscript,\n  dialog,\n  kdialog,\n  msg,\n  'notify-send': notifySend,\n  osascript,\n  whiptail,\n  xmessage,\n  yad,\n  zenity\n};\n\nconst getAlert = function () {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let thingToUse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  const execInput = cmd => execCmd(cmd(input));\n\n  const pickFromNameMap = function () {\n    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bestUnixProgram;\n\n    if (option !== 'console') {\n      if (nameMap[option]) {\n        return execInput(nameMap[option]);\n      }\n    }\n\n    return console.log(input);\n  };\n\n  if (thingToUse) {\n    return pickFromNameMap(thingToUse);\n  }\n\n  switch (platform) {\n    case 'linux':\n    case 'freebsd':\n    case 'sunos':\n      return pickFromNameMap(bestUnixProgram);\n\n    case 'darwin':\n      return execInput(osascript);\n\n    case 'win32':\n      return hasCscript ? execInput(cscript) : execInput(msg);\n\n    default:\n      return console.log(input);\n  }\n};\n\nmodule.exports = process.env.DISABLE_ALERT !== '1' ? getAlert : () => {};","map":{"version":3,"names":["execSync","spawn","require","platform","process","join","isProgramInstalled","windowsScript","__dirname","execCmd","cmds","splice","unixPrograms","bestUnixProgram","filter","cscript","s","msg","str","zenity","yad","notifySend","xmessage","dialog","whiptail","kdialog","osascript","hasCscript","startsWith","nameMap","console","log","getAlert","input","thingToUse","execInput","cmd","pickFromNameMap","option","module","exports","env","DISABLE_ALERT"],"sources":["/Users/analeasterling/Desktop/LaunchCode-Projects/LiftOff/Parks-N-Rec/src/main/ui/node_modules/alert/node.js"],"sourcesContent":["const { execSync, spawn } = require('child_process')\nconst { platform } = process\nconst { join } = require('path')\nconst isProgramInstalled = require('is-program-installed')\nconst windowsScript = join(__dirname, 'msgbox.vbs')\n\nconst execCmd = (cmds) => spawn(cmds[0], cmds.splice(1))\n\nconst unixPrograms = [\n  'kdialog',\n  'zenity',\n  'yad',\n  'notify-send',\n  'xmessage',\n  'dialog',\n  'whiptail'\n]\n\nconst bestUnixProgram = unixPrograms.filter(isProgramInstalled)[0] || 'console'\n\nconst cscript = (s) => ['cscript', windowsScript, s]\nconst msg = (str) => ['msg', '\"%username%\"', str]\nconst zenity = (s) => ['zenity', '--info', '--text', s]\nconst yad = (s) => ['yad', '--text', s, '--button', 'OK']\nconst notifySend = (s) => ['notify-send', s]\nconst xmessage = (s) => ['xmessage', s]\nconst dialog = (s) => ['dialog', '--msgbox', s, '10', '30']\nconst whiptail = (s) => ['whiptail', '--msbox', s, '10', '30']\nconst kdialog = (s) => ['kdialog', '--msgbox', s]\nconst osascript = (s) => [\n  'osascript',\n  '-e',\n  `tell app \"System Events\" to display dialog \"${s}\" buttons \"OK\"`\n]\n\nconst hasCscript =\n  platform.startsWith('win') &&\n  (() => {\n    try {\n      execSync('cscript')\n      return true\n    } catch {\n      return false\n    }\n  })()\n\nconst nameMap = {\n  console: console.log,\n  cscript,\n  dialog,\n  kdialog,\n  msg,\n  'notify-send': notifySend,\n  osascript,\n  whiptail,\n  xmessage,\n  yad,\n  zenity\n}\n\nconst getAlert = (input = '', thingToUse = '') => {\n  const execInput = (cmd) => execCmd(cmd(input))\n\n  const pickFromNameMap = (option = bestUnixProgram) => {\n    if (option !== 'console') {\n      if (nameMap[option]) {\n        return execInput(nameMap[option])\n      }\n    }\n    return console.log(input)\n  }\n\n  if (thingToUse) {\n    return pickFromNameMap(thingToUse)\n  }\n\n  switch (platform) {\n    case 'linux':\n    case 'freebsd':\n    case 'sunos':\n      return pickFromNameMap(bestUnixProgram)\n    case 'darwin':\n      return execInput(osascript)\n    case 'win32':\n      return hasCscript ? execInput(cscript) : execInput(msg)\n    default:\n      return console.log(input)\n  }\n}\n\nmodule.exports = process.env.DISABLE_ALERT !== '1' ? getAlert : () => {}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}